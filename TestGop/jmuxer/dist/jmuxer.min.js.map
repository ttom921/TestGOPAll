{"version":3,"file":"jmuxer.min.js","sources":["../src/util/debug.js","../src/util/nalu.js","../src/util/exp-golomb.js","../src/parsers/h264.js","../src/parsers/aac.js","../src/util/event.js","../src/util/mp4-generator.js","../src/remuxer/base.js","../src/remuxer/aac.js","../src/remuxer/h264.js","../src/util/utils.js","../src/controller/remux.js","../src/controller/buffer.js","../src/jmuxer.js"],"sourcesContent":["let logger;\r\nlet errorLogger;\r\n\r\nexport function setLogger() {\r\n    /*eslint-disable */\r\n    logger = console.log;\r\n    errorLogger = console.error;\r\n    /*eslint-enable */\r\n}\r\n\r\nexport function isEnable() {\r\n    return logger != null;\r\n}\r\n\r\nexport function log(message, ...optionalParams) {\r\n    if (logger) {\r\n        logger(message, ...optionalParams);\r\n    }\r\n}\r\nexport function error(message, ...optionalParams) {\r\n    if (errorLogger) {\r\n        errorLogger(message, ...optionalParams);\r\n    }\r\n}\r\n","export class NALU {\r\n\r\n    static get NDR() { return 1; }\r\n    static get IDR() { return 5; }\r\n    static get SEI() { return 6; }\r\n    static get SPS() { return 7; }\r\n    static get PPS() { return 8; }\r\n    static get AUD() { return 9; }\r\n\r\n    static get TYPES() {\r\n        return {\r\n            [NALU.IDR]: 'IDR',\r\n            [NALU.SEI]: 'SEI',\r\n            [NALU.SPS]: 'SPS',\r\n            [NALU.PPS]: 'PPS',\r\n            [NALU.NDR]: 'NDR',\r\n            [NALU.AUD]: 'AUD',\r\n        };\r\n    }\r\n\r\n    static type(nalu) {\r\n        if (nalu.ntype in NALU.TYPES) {\r\n            return NALU.TYPES[nalu.ntype];\r\n        } else {\r\n            return 'UNKNOWN';\r\n        }\r\n    }\r\n\r\n    constructor(data) {\r\n        this.payload = data;\r\n        this.nri = (this.payload[0] & 0x60) >> 5;\r\n        this.ntype = this.payload[0] & 0x1f;\r\n    }\r\n\r\n    toString() {\r\n        return `${NALU.type(this)}: NRI: ${this.getNri()}`;\r\n    }\r\n\r\n    getNri() {\r\n        return this.nri >> 6;\r\n    }\r\n\r\n    type() {\r\n        return this.ntype;\r\n    }\r\n\r\n    isKeyframe() {\r\n        return this.ntype == NALU.IDR;\r\n    }\r\n\r\n    getSize() {\r\n        return 4 + this.payload.byteLength;\r\n    }\r\n\r\n    getData() {\r\n        const result = new Uint8Array(this.getSize());\r\n        const view = new DataView(result.buffer);\r\n        view.setUint32(0, this.getSize() - 4);\r\n\r\n        result.set(this.payload, 4);\r\n        return result;\r\n    }\r\n}\r\n","/**\r\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\r\n*/\r\n\r\nexport class ExpGolomb {\r\n\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.index = 0;\r\n        this.bitLength = data.byteLength * 8;\r\n    }\r\n\r\n    get bitsAvailable() {\r\n        return this.bitLength - this.index;\r\n    }\r\n\r\n    skipBits(size) {\r\n        // console.log(`  skip bits: size=${size}, ${this.index}.`);\r\n        if (this.bitsAvailable < size) {\r\n            //throw new Error('no bytes available');\r\n            return false;\r\n        }\r\n        this.index += size;\r\n    }\r\n\r\n    readBits(size, moveIndex = true) {\r\n        // console.log(`  read bits: size=${size}, ${this.index}.`);\r\n        const result = this.getBits(size, this.index, moveIndex);\r\n        // console.log(`    read bits: result=${result}`);\r\n        return result;\r\n    }\r\n\r\n    getBits(size, offsetBits, moveIndex = true) {\r\n        if (this.bitsAvailable < size) {\r\n            //throw new Error('no bytes available');\r\n            return 0;\r\n        }\r\n        const offset = offsetBits % 8;\r\n        const byte = this.data[(offsetBits / 8) | 0] & (0xff >>> offset);\r\n        const bits = 8 - offset;\r\n        if (bits >= size) {\r\n            if (moveIndex) {\r\n                this.index += size;\r\n            }\r\n            return byte >> (bits - size);\r\n        } else {\r\n            if (moveIndex) {\r\n                this.index += bits;\r\n            }\r\n            const nextSize = size - bits;\r\n            return (byte << nextSize) | this.getBits(nextSize, offsetBits + bits, moveIndex);\r\n        }\r\n    }\r\n\r\n    skipLZ() {\r\n        let leadingZeroCount;\r\n        for (leadingZeroCount = 0; leadingZeroCount < this.bitLength - this.index; ++leadingZeroCount) {\r\n            if (this.getBits(1, this.index + leadingZeroCount, false) !== 0) {\r\n                // console.log(`  skip LZ  : size=${leadingZeroCount}, ${this.index}.`);\r\n                this.index += leadingZeroCount;\r\n                return leadingZeroCount;\r\n            }\r\n        }\r\n        return leadingZeroCount;\r\n    }\r\n\r\n    skipUEG() {\r\n        this.skipBits(1 + this.skipLZ());\r\n    }\r\n\r\n    skipEG() {\r\n        this.skipBits(1 + this.skipLZ());\r\n    }\r\n\r\n    readUEG() {\r\n        const prefix = this.skipLZ();\r\n        return this.readBits(prefix + 1) - 1;\r\n    }\r\n\r\n    readEG() {\r\n        const value = this.readUEG();\r\n        if (0x01 & value) {\r\n            // the number is odd if the low order bit is set\r\n            return (1 + value) >>> 1; // add 1 to make it even, and divide by 2\r\n        } else {\r\n            return -1 * (value >>> 1); // divide by two then make it negative\r\n        }\r\n    }\r\n\r\n    readBoolean() {\r\n        return this.readBits(1) === 1;\r\n    }\r\n    readUByte(numberOfBytes = 1) {\r\n        return this.readBits((numberOfBytes * 8));\r\n    }\r\n    readUShort() {\r\n        return this.readBits(16);\r\n    }\r\n    readUInt() {\r\n        return this.readBits(32);\r\n    }\r\n}\r\n\r\n","import { ExpGolomb } from '../util/exp-golomb.js';\r\nimport { NALU } from '../util/nalu.js';\r\nimport * as debug from '../util/debug';\r\n\r\nexport class H264Parser {\r\n\r\n    static extractNALu(buffer) {\r\n        let i = 0,\r\n            length = buffer.byteLength,\r\n            value,\r\n            state = 0,\r\n            result = [],\r\n            lastIndex;\r\n\r\n        while (i < length) {\r\n            value = buffer[i++];\r\n            // finding 3 or 4-byte start codes (00 00 01 OR 00 00 00 01)\r\n            switch (state) {\r\n                case 0:\r\n                    if (value === 0) {\r\n                        state = 1;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (value === 0) {\r\n                        state = 2;\r\n                    } else {\r\n                        state = 0;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                case 3:\r\n                    if (value === 0) {\r\n                        state = 3;\r\n                    } else if (value === 1 && i < length) {\r\n                        if (lastIndex) {\r\n                            result.push(buffer.subarray(lastIndex, i - state -1));\r\n                        }\r\n                        lastIndex = i;\r\n                        state = 0;\r\n                    } else {\r\n                        state = 0;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (lastIndex) {\r\n            result.push(buffer.subarray(lastIndex, length));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\r\n     * list is optionally transmitted as part of a sequence parameter\r\n     * set and is not relevant to transmuxing.\r\n     * @param decoder {ExpGolomb} exp golomb decoder\r\n     * @param count {number} the number of entries in this scaling list\r\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\r\n     */\r\n    static skipScalingList(decoder, count) {\r\n        let lastScale = 8,\r\n            nextScale = 8,\r\n            deltaScale;\r\n        for (let j = 0; j < count; j++) {\r\n            if (nextScale !== 0) {\r\n                deltaScale = decoder.readEG();\r\n                nextScale = (lastScale + deltaScale + 256) % 256;\r\n            }\r\n            lastScale = (nextScale === 0) ? lastScale : nextScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read a sequence parameter set and return some interesting video\r\n     * properties. A sequence parameter set is the H264 metadata that\r\n     * describes the properties of upcoming video frames.\r\n     * @param data {Uint8Array} the bytes of a sequence parameter set\r\n     * @return {object} an object with configuration parsed from the\r\n     * sequence parameter set, including the dimensions of the\r\n     * associated video frames.\r\n     */\r\n    static readSPS(data) {\r\n        let decoder = new ExpGolomb(data);\r\n        let frameCropLeftOffset = 0,\r\n            frameCropRightOffset = 0,\r\n            frameCropTopOffset = 0,\r\n            frameCropBottomOffset = 0,\r\n            sarScale = 1,\r\n            profileIdc,\r\n            profileCompat,\r\n            levelIdc,\r\n            numRefFramesInPicOrderCntCycle,\r\n            picWidthInMbsMinus1,\r\n            picHeightInMapUnitsMinus1,\r\n            frameMbsOnlyFlag,\r\n            scalingListCount;\r\n        decoder.readUByte();\r\n        profileIdc = decoder.readUByte(); // profile_idc\r\n        profileCompat = decoder.readBits(5); // constraint_set[0-4]_flag, u(5)\r\n        decoder.skipBits(3); // reserved_zero_3bits u(3),\r\n        levelIdc = decoder.readUByte(); // level_idc u(8)\r\n        decoder.skipUEG(); // seq_parameter_set_id\r\n        // some profiles have more optional data we don't need\r\n        if (profileIdc === 100 ||\r\n            profileIdc === 110 ||\r\n            profileIdc === 122 ||\r\n            profileIdc === 244 ||\r\n            profileIdc === 44 ||\r\n            profileIdc === 83 ||\r\n            profileIdc === 86 ||\r\n            profileIdc === 118 ||\r\n            profileIdc === 128) {\r\n            var chromaFormatIdc = decoder.readUEG();\r\n            if (chromaFormatIdc === 3) {\r\n                decoder.skipBits(1); // separate_colour_plane_flag\r\n            }\r\n            decoder.skipUEG(); // bit_depth_luma_minus8\r\n            decoder.skipUEG(); // bit_depth_chroma_minus8\r\n            decoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\r\n            if (decoder.readBoolean()) { // seq_scaling_matrix_present_flag\r\n                scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\r\n                for (let i = 0; i < scalingListCount; ++i) {\r\n                    if (decoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\r\n                        if (i < 6) {\r\n                            H264Parser.skipScalingList(decoder, 16);\r\n                        } else {\r\n                            H264Parser.skipScalingList(decoder, 64);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        decoder.skipUEG(); // log2_max_frame_num_minus4\r\n        var picOrderCntType = decoder.readUEG();\r\n        if (picOrderCntType === 0) {\r\n            decoder.readUEG(); // log2_max_pic_order_cnt_lsb_minus4\r\n        } else if (picOrderCntType === 1) {\r\n            decoder.skipBits(1); // delta_pic_order_always_zero_flag\r\n            decoder.skipEG(); // offset_for_non_ref_pic\r\n            decoder.skipEG(); // offset_for_top_to_bottom_field\r\n            numRefFramesInPicOrderCntCycle = decoder.readUEG();\r\n            for (let i = 0; i < numRefFramesInPicOrderCntCycle; ++i) {\r\n                decoder.skipEG(); // offset_for_ref_frame[ i ]\r\n            }\r\n        }\r\n        decoder.skipUEG(); // max_num_ref_frames\r\n        decoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\r\n        picWidthInMbsMinus1 = decoder.readUEG();\r\n        picHeightInMapUnitsMinus1 = decoder.readUEG();\r\n        frameMbsOnlyFlag = decoder.readBits(1);\r\n        if (frameMbsOnlyFlag === 0) {\r\n            decoder.skipBits(1); // mb_adaptive_frame_field_flag\r\n        }\r\n        decoder.skipBits(1); // direct_8x8_inference_flag\r\n        if (decoder.readBoolean()) { // frame_cropping_flag\r\n            frameCropLeftOffset = decoder.readUEG();\r\n            frameCropRightOffset = decoder.readUEG();\r\n            frameCropTopOffset = decoder.readUEG();\r\n            frameCropBottomOffset = decoder.readUEG();\r\n        }\r\n        if (decoder.readBoolean()) {\r\n            // vui_parameters_present_flag\r\n            if (decoder.readBoolean()) {\r\n                // aspect_ratio_info_present_flag\r\n                let sarRatio;\r\n                const aspectRatioIdc = decoder.readUByte();\r\n                switch (aspectRatioIdc) {\r\n                    case 1: sarRatio = [1, 1]; break;\r\n                    case 2: sarRatio = [12, 11]; break;\r\n                    case 3: sarRatio = [10, 11]; break;\r\n                    case 4: sarRatio = [16, 11]; break;\r\n                    case 5: sarRatio = [40, 33]; break;\r\n                    case 6: sarRatio = [24, 11]; break;\r\n                    case 7: sarRatio = [20, 11]; break;\r\n                    case 8: sarRatio = [32, 11]; break;\r\n                    case 9: sarRatio = [80, 33]; break;\r\n                    case 10: sarRatio = [18, 11]; break;\r\n                    case 11: sarRatio = [15, 11]; break;\r\n                    case 12: sarRatio = [64, 33]; break;\r\n                    case 13: sarRatio = [160, 99]; break;\r\n                    case 14: sarRatio = [4, 3]; break;\r\n                    case 15: sarRatio = [3, 2]; break;\r\n                    case 16: sarRatio = [2, 1]; break;\r\n                    case 255: {\r\n                        sarRatio = [decoder.readUByte() << 8 | decoder.readUByte(), decoder.readUByte() << 8 | decoder.readUByte()];\r\n                        break;\r\n                    }\r\n                }\r\n                if (sarRatio) {\r\n                    sarScale = sarRatio[0] / sarRatio[1];\r\n                }\r\n            }\r\n            if (decoder.readBoolean()) { decoder.skipBits(1); }\r\n\r\n            if (decoder.readBoolean()) {\r\n                decoder.skipBits(4);\r\n                if (decoder.readBoolean()) {\r\n                    decoder.skipBits(24);\r\n                }\r\n            }\r\n            if (decoder.readBoolean()) {\r\n                decoder.skipUEG();\r\n                decoder.skipUEG();\r\n            }\r\n            if (decoder.readBoolean()) {\r\n                let unitsInTick = decoder.readUInt();\r\n                let timeScale = decoder.readUInt();\r\n                let fixedFrameRate = decoder.readBoolean();\r\n                let frameDuration = timeScale / (2 * unitsInTick);\r\n            }\r\n        }\r\n        return {\r\n            width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\r\n            height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - ((frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset)),\r\n        };\r\n    }\r\n\r\n    constructor(remuxer) {\r\n        this.remuxer = remuxer;\r\n        this.track = remuxer.mp4track;\r\n    }\r\n\r\n    parseSPS(sps) {\r\n        var config = H264Parser.readSPS(new Uint8Array(sps));\r\n\r\n        this.track.width = config.width;\r\n        this.track.height = config.height;\r\n        this.track.sps = [new Uint8Array(sps)];\r\n        this.track.codec = 'avc1.';\r\n\r\n        let codecarray = new DataView(sps.buffer, sps.byteOffset + 1, 4);\r\n        for (let i = 0; i < 3; ++i) {\r\n            var h = codecarray.getUint8(i).toString(16);\r\n            if (h.length < 2) {\r\n                h = '0' + h;\r\n            }\r\n            this.track.codec += h;\r\n        }\r\n    }\r\n\r\n    parsePPS(pps) {\r\n        this.track.pps = [new Uint8Array(pps)];\r\n    }\r\n\r\n    parseNAL(unit) {\r\n        if (!unit) return false;\r\n\r\n        let push = false;\r\n        switch (unit.type()) {\r\n            case NALU.NDR:\r\n                push = true;\r\n                break;\r\n            case NALU.IDR:\r\n                push = true;\r\n                break;\r\n            case NALU.PPS:\r\n                if (!this.track.pps) {\r\n                    this.parsePPS(unit.getData().subarray(4));\r\n                    if (!this.remuxer.readyToDecode && this.track.pps && this.track.sps) {\r\n                        this.remuxer.readyToDecode = true;\r\n                    }\r\n                }\r\n                push = true;\r\n                break;\r\n            case NALU.SPS:\r\n                if (!this.track.sps) {\r\n                    this.parseSPS(unit.getData().subarray(4));\r\n                    if (!this.remuxer.readyToDecode && this.track.pps && this.track.sps) {\r\n                        this.remuxer.readyToDecode = true;\r\n                    }\r\n                }\r\n                push = true;\r\n                break;\r\n            case NALU.AUD:\r\n                debug.log('AUD - ignoing and disable HD mode for live channel');\r\n                if (this.remuxer.isHDAvail) {\r\n                    this.remuxer.isHDAvail = false;\r\n                }\r\n                break;\r\n            case NALU.SEI:\r\n                debug.log('SEI - ignoing');\r\n                break;\r\n            default:\r\n        }\r\n        return push;\r\n    }\r\n}\r\n","import * as debug from '../util/debug';\r\nlet aacHeader;\r\nexport class AACParser {\r\n    \r\n    static get samplingRateMap() {\r\n        return [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\r\n    }\r\n\r\n    static get getAACHeaderData() {\r\n        return aacHeader;\r\n    }\r\n\r\n    static getHeaderLength(data) {\r\n        return (data[1] & 0x01 ? 7 : 9);  // without CRC 7 and with CRC 9 Refs: https://wiki.multimedia.cx/index.php?title=ADTS\r\n    }\r\n\r\n    static getFrameLength(data) {\r\n        return ((data[3] & 0x03) << 11) | (data[4] << 3) | ((data[5] & 0xE0) >>> 5); // 13 bits length ref: https://wiki.multimedia.cx/index.php?title=ADTS\r\n    }\r\n\r\n    static isAACPattern (data) {\r\n        return data[0] === 0xff && (data[1] & 0xf0) === 0xf0 && (data[1] & 0x06) === 0x00;\r\n    }\r\n\r\n    static extractAAC(buffer) {\r\n        let i = 0,\r\n            length = buffer.byteLength,\r\n            result = [],\r\n            headerLength,\r\n            frameLength;\r\n\r\n        if (!AACParser.isAACPattern(buffer)) {\r\n            debug.error('Invalid ADTS audio format');\r\n            return result;\r\n        }\r\n        headerLength = AACParser.getHeaderLength(buffer);\r\n        if (!aacHeader) {\r\n            aacHeader = buffer.subarray(0, headerLength);\r\n        }\r\n\r\n        while (i < length) {\r\n            frameLength = AACParser.getFrameLength(buffer);\r\n            result.push(buffer.subarray(headerLength, frameLength));\r\n            buffer = buffer.slice(frameLength);\r\n            i += frameLength;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    constructor(remuxer) {\r\n        this.remuxer = remuxer;\r\n        this.track = remuxer.mp4track;\r\n    }\r\n\r\n    setAACConfig() {\r\n        let objectType,\r\n            sampleIndex,\r\n            channelCount,\r\n            config = new Uint8Array(2),\r\n            headerData = AACParser.getAACHeaderData;\r\n\r\n        if (!headerData) return;\r\n            \r\n        objectType = ((headerData[2] & 0xC0) >>> 6) + 1;\r\n        sampleIndex = ((headerData[2] & 0x3C) >>> 2);\r\n        channelCount = ((headerData[2] & 0x01) << 2);\r\n        channelCount |= ((headerData[3] & 0xC0) >>> 6);\r\n\r\n        /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config */\r\n        config[0] = objectType << 3;\r\n        config[0] |= (sampleIndex & 0x0E) >> 1;\r\n        config[1] |= (sampleIndex & 0x01) << 7;\r\n        config[1] |= channelCount << 3;\r\n\r\n        this.track.codec = 'mp4a.40.' + objectType;\r\n        this.track.channelCount = channelCount;\r\n        this.track.config = config;\r\n        this.remuxer.readyToDecode = true;\r\n    }\r\n}\r\n","export default class Event {\r\n    constructor(type) {\r\n        this.listener = {};\r\n        this.type = type | '';\r\n    }\r\n\r\n    on(event, fn) {\r\n        if (!this.listener[event]) {\r\n            this.listener[event] = [];\r\n        }\r\n        this.listener[event].push(fn);\r\n        return true;\r\n    }\r\n\r\n    off(event, fn) {\r\n        if (this.listener[event]) {\r\n            var index = this.listener[event].indexOf(fn);\r\n            if (index > -1) {\r\n                this.listener[event].splice(index, 1);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    offAll() {\r\n        this.listener = {};\r\n    }\r\n\r\n    dispatch(event, data) {\r\n        if (this.listener[event]) {\r\n            this.listener[event].map((each) => {\r\n                each.apply(null, [data]);\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * Generate MP4 Box\r\n * taken from: https://github.com/dailymotion/hls.js\r\n */\r\n\r\nexport class MP4 {\r\n    static init() {\r\n        MP4.types = {\r\n            avc1: [], // codingname\r\n            avcC: [],\r\n            btrt: [],\r\n            dinf: [],\r\n            dref: [],\r\n            esds: [],\r\n            ftyp: [],\r\n            hdlr: [],\r\n            mdat: [],\r\n            mdhd: [],\r\n            mdia: [],\r\n            mfhd: [],\r\n            minf: [],\r\n            moof: [],\r\n            moov: [],\r\n            mp4a: [],\r\n            mvex: [],\r\n            mvhd: [],\r\n            sdtp: [],\r\n            stbl: [],\r\n            stco: [],\r\n            stsc: [],\r\n            stsd: [],\r\n            stsz: [],\r\n            stts: [],\r\n            tfdt: [],\r\n            tfhd: [],\r\n            traf: [],\r\n            trak: [],\r\n            trun: [],\r\n            trex: [],\r\n            tkhd: [],\r\n            vmhd: [],\r\n            smhd: [],\r\n        };\r\n\r\n        var i;\r\n        for (i in MP4.types) {\r\n            if (MP4.types.hasOwnProperty(i)) {\r\n                MP4.types[i] = [\r\n                    i.charCodeAt(0),\r\n                    i.charCodeAt(1),\r\n                    i.charCodeAt(2),\r\n                    i.charCodeAt(3),\r\n                ];\r\n            }\r\n        }\r\n\r\n        var videoHdlr = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // pre_defined\r\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x56, 0x69, 0x64, 0x65,\r\n            0x6f, 0x48, 0x61, 0x6e,\r\n            0x64, 0x6c, 0x65, 0x72, 0x00, // name: 'VideoHandler'\r\n        ]);\r\n\r\n        var audioHdlr = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // pre_defined\r\n            0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x53, 0x6f, 0x75, 0x6e,\r\n            0x64, 0x48, 0x61, 0x6e,\r\n            0x64, 0x6c, 0x65, 0x72, 0x00, // name: 'SoundHandler'\r\n        ]);\r\n\r\n        MP4.HDLR_TYPES = {\r\n            video: videoHdlr,\r\n            audio: audioHdlr,\r\n        };\r\n\r\n        var dref = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x01, // entry_count\r\n            0x00, 0x00, 0x00, 0x0c, // entry_size\r\n            0x75, 0x72, 0x6c, 0x20, // 'url' type\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x01, // entry_flags\r\n        ]);\r\n\r\n        var stco = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // entry_count\r\n        ]);\r\n\r\n        MP4.STTS = MP4.STSC = MP4.STCO = stco;\r\n\r\n        MP4.STSZ = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // sample_size\r\n            0x00, 0x00, 0x00, 0x00, // sample_count\r\n        ]);\r\n        MP4.VMHD = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x01, // flags\r\n            0x00, 0x00, // graphicsmode\r\n            0x00, 0x00,\r\n            0x00, 0x00,\r\n            0x00, 0x00, // opcolor\r\n        ]);\r\n        MP4.SMHD = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, // balance\r\n            0x00, 0x00, // reserved\r\n        ]);\r\n\r\n        MP4.STSD = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x01]);// entry_count\r\n\r\n        var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\r\n        var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\r\n        var minorVersion = new Uint8Array([0, 0, 0, 1]);\r\n\r\n        MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\r\n        MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\r\n    }\r\n\r\n    static box(type, ...payload) {\r\n        var size = 8,\r\n            i = payload.length,\r\n            len = i,\r\n            result;\r\n        // calculate the total size we need to allocate\r\n        while (i--) {\r\n            size += payload[i].byteLength;\r\n        }\r\n        result = new Uint8Array(size);\r\n        result[0] = (size >> 24) & 0xff;\r\n        result[1] = (size >> 16) & 0xff;\r\n        result[2] = (size >> 8) & 0xff;\r\n        result[3] = size & 0xff;\r\n        result.set(type, 4);\r\n        // copy the payload into the result\r\n        for (i = 0, size = 8; i < len; ++i) {\r\n            // copy payload[i] array @ offset size\r\n            result.set(payload[i], size);\r\n            size += payload[i].byteLength;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static hdlr(type) {\r\n        return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\r\n    }\r\n\r\n    static mdat(data) {\r\n        return MP4.box(MP4.types.mdat, data);\r\n    }\r\n\r\n    static mdhd(timescale, duration) {\r\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x02, // creation_time\r\n            0x00, 0x00, 0x00, 0x03, // modification_time\r\n            (timescale >> 24) & 0xFF,\r\n            (timescale >> 16) & 0xFF,\r\n            (timescale >> 8) & 0xFF,\r\n            timescale & 0xFF, // timescale\r\n            (duration >> 24),\r\n            (duration >> 16) & 0xFF,\r\n            (duration >> 8) & 0xFF,\r\n            duration & 0xFF, // duration\r\n            0x55, 0xc4, // 'und' language (undetermined)\r\n            0x00, 0x00,\r\n        ]));\r\n    }\r\n\r\n    static mdia(track) {\r\n        return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\r\n    }\r\n\r\n    static mfhd(sequenceNumber) {\r\n        return MP4.box(MP4.types.mfhd, new Uint8Array([\r\n            0x00,\r\n            0x00, 0x00, 0x00, // flags\r\n            (sequenceNumber >> 24),\r\n            (sequenceNumber >> 16) & 0xFF,\r\n            (sequenceNumber >> 8) & 0xFF,\r\n            sequenceNumber & 0xFF, // sequence_number\r\n        ]));\r\n    }\r\n\r\n    static minf(track) {\r\n        if (track.type === 'audio') {\r\n            return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\r\n        } else {\r\n            return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\r\n        }\r\n    }\r\n\r\n    static moof(sn, baseMediaDecodeTime, track) {\r\n        return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\r\n    }\r\n    /**\r\n     * @param tracks... (optional) {array} the tracks associated with this movie\r\n     */\r\n    static moov(tracks, duration, timescale) {\r\n        var\r\n            i = tracks.length,\r\n            boxes = [];\r\n\r\n        while (i--) {\r\n            boxes[i] = MP4.trak(tracks[i]);\r\n        }\r\n\r\n        return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(timescale, duration)].concat(boxes).concat(MP4.mvex(tracks)));\r\n    }\r\n\r\n    static mvex(tracks) {\r\n        var\r\n            i = tracks.length,\r\n            boxes = [];\r\n\r\n        while (i--) {\r\n            boxes[i] = MP4.trex(tracks[i]);\r\n        }\r\n        return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\r\n    }\r\n\r\n    static mvhd(timescale, duration) {\r\n        var\r\n            bytes = new Uint8Array([\r\n                0x00, // version 0\r\n                0x00, 0x00, 0x00, // flags\r\n                0x00, 0x00, 0x00, 0x01, // creation_time\r\n                0x00, 0x00, 0x00, 0x02, // modification_time\r\n                (timescale >> 24) & 0xFF,\r\n                (timescale >> 16) & 0xFF,\r\n                (timescale >> 8) & 0xFF,\r\n                timescale & 0xFF, // timescale\r\n                (duration >> 24) & 0xFF,\r\n                (duration >> 16) & 0xFF,\r\n                (duration >> 8) & 0xFF,\r\n                duration & 0xFF, // duration\r\n                0x00, 0x01, 0x00, 0x00, // 1.0 rate\r\n                0x01, 0x00, // 1.0 volume\r\n                0x00, 0x00, // reserved\r\n                0x00, 0x00, 0x00, 0x00, // reserved\r\n                0x00, 0x00, 0x00, 0x00, // reserved\r\n                0x00, 0x01, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x01, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00, // pre_defined\r\n                0xff, 0xff, 0xff, 0xff, // next_track_ID\r\n            ]);\r\n        return MP4.box(MP4.types.mvhd, bytes);\r\n    }\r\n\r\n    static sdtp(track) {\r\n        var\r\n            samples = track.samples || [],\r\n            bytes = new Uint8Array(4 + samples.length),\r\n            flags,\r\n            i;\r\n        // leave the full box header (4 bytes) all zero\r\n        // write the sample table\r\n        for (i = 0; i < samples.length; i++) {\r\n            flags = samples[i].flags;\r\n            bytes[i + 4] = (flags.dependsOn << 4) |\r\n                (flags.isDependedOn << 2) |\r\n                (flags.hasRedundancy);\r\n        }\r\n\r\n        return MP4.box(MP4.types.sdtp, bytes);\r\n    }\r\n\r\n    static stbl(track) {\r\n        return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\r\n    }\r\n\r\n    static avc1(track) {\r\n        var sps = [],\r\n            pps = [],\r\n            i,\r\n            data,\r\n            len;\r\n        // assemble the SPSs\r\n\r\n        for (i = 0; i < track.sps.length; i++) {\r\n            data = track.sps[i];\r\n            len = data.byteLength;\r\n            sps.push((len >>> 8) & 0xFF);\r\n            sps.push((len & 0xFF));\r\n            sps = sps.concat(Array.prototype.slice.call(data)); // SPS\r\n        }\r\n\r\n        // assemble the PPSs\r\n        for (i = 0; i < track.pps.length; i++) {\r\n            data = track.pps[i];\r\n            len = data.byteLength;\r\n            pps.push((len >>> 8) & 0xFF);\r\n            pps.push((len & 0xFF));\r\n            pps = pps.concat(Array.prototype.slice.call(data));\r\n        }\r\n\r\n        var avcc = MP4.box(MP4.types.avcC, new Uint8Array([\r\n                0x01,   // version\r\n                sps[3], // profile\r\n                sps[4], // profile compat\r\n                sps[5], // level\r\n                0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\r\n                0xE0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\r\n            ].concat(sps).concat([\r\n                track.pps.length, // numOfPictureParameterSets\r\n            ]).concat(pps))), // \"PPS\"\r\n            width = track.width,\r\n            height = track.height;\r\n        // console.log('avcc:' + Hex.hexDump(avcc));\r\n        return MP4.box(MP4.types.avc1, new Uint8Array([\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x01, // data_reference_index\r\n            0x00, 0x00, // pre_defined\r\n            0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, // pre_defined\r\n            (width >> 8) & 0xFF,\r\n            width & 0xff, // width\r\n            (height >> 8) & 0xFF,\r\n            height & 0xff, // height\r\n            0x00, 0x48, 0x00, 0x00, // horizresolution\r\n            0x00, 0x48, 0x00, 0x00, // vertresolution\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x01, // frame_count\r\n            0x12,\r\n            0x62, 0x69, 0x6E, 0x65, // binelpro.ru\r\n            0x6C, 0x70, 0x72, 0x6F,\r\n            0x2E, 0x72, 0x75, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, // compressorname\r\n            0x00, 0x18,   // depth = 24\r\n            0x11, 0x11]), // pre_defined = -1\r\n        avcc,\r\n        MP4.box(MP4.types.btrt, new Uint8Array([\r\n            0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\r\n            0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\r\n            0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\r\n        );\r\n    }\r\n\r\n    static esds(track) {\r\n        var configlen = track.config.byteLength;\r\n        let data = new Uint8Array(26 + configlen + 3);\r\n        data.set([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n\r\n            0x03, // descriptor_type\r\n            0x17 + configlen, // length\r\n            0x00, 0x01, // es_id\r\n            0x00, // stream_priority\r\n\r\n            0x04, // descriptor_type\r\n            0x0f + configlen, // length\r\n            0x40, // codec : mpeg4_audio\r\n            0x15, // stream_type\r\n            0x00, 0x00, 0x00, // buffer_size\r\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\r\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\r\n\r\n            0x05, // descriptor_type\r\n            configlen,\r\n        ]);\r\n        data.set(track.config, 26);\r\n        data.set([0x06, 0x01, 0x02], 26 + configlen);\r\n        // return new Uint8Array([\r\n        //     0x00, // version 0\r\n        //     0x00, 0x00, 0x00, // flags\r\n        //\r\n        //     0x03, // descriptor_type\r\n        //     0x17+configlen, // length\r\n        //     0x00, 0x01, //es_id\r\n        //     0x00, // stream_priority\r\n        //\r\n        //     0x04, // descriptor_type\r\n        //     0x0f+configlen, // length\r\n        //     0x40, //codec : mpeg4_audio\r\n        //     0x15, // stream_type\r\n        //     0x00, 0x00, 0x00, // buffer_size\r\n        //     0x00, 0x00, 0x00, 0x00, // maxBitrate\r\n        //     0x00, 0x00, 0x00, 0x00, // avgBitrate\r\n        //\r\n        //     0x05 // descriptor_type\r\n        // ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\r\n        return data;\r\n    }\r\n\r\n    static mp4a(track) {\r\n        var audiosamplerate = track.audiosamplerate;\r\n        return MP4.box(MP4.types.mp4a, new Uint8Array([\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x01, // data_reference_index\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, track.channelCount, // channelcount\r\n            0x00, 0x10, // sampleSize:16bits\r\n            0x00, 0x00, // pre_defined\r\n            0x00, 0x00, // reserved2\r\n            (audiosamplerate >> 8) & 0xFF,\r\n            audiosamplerate & 0xff, //\r\n            0x00, 0x00]),\r\n        MP4.box(MP4.types.esds, MP4.esds(track)));\r\n    }\r\n\r\n    static stsd(track) {\r\n        if (track.type === 'audio') {\r\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\r\n        } else {\r\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\r\n        }\r\n    }\r\n\r\n    static tkhd(track) {\r\n        var id = track.id,\r\n            duration = track.duration,\r\n            width = track.width,\r\n            height = track.height,\r\n            volume = track.volume;\r\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x07, // flags\r\n            0x00, 0x00, 0x00, 0x00, // creation_time\r\n            0x00, 0x00, 0x00, 0x00, // modification_time\r\n            (id >> 24) & 0xFF,\r\n            (id >> 16) & 0xFF,\r\n            (id >> 8) & 0xFF,\r\n            id & 0xFF, // track_ID\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            (duration >> 24),\r\n            (duration >> 16) & 0xFF,\r\n            (duration >> 8) & 0xFF,\r\n            duration & 0xFF, // duration\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, // layer\r\n            0x00, 0x00, // alternate_group\r\n            (volume >> 0) & 0xff, (((volume % 1) * 10) >> 0) & 0xff, // track volume // FIXME\r\n            0x00, 0x00, // reserved\r\n            0x00, 0x01, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x01, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\r\n            (width >> 8) & 0xFF,\r\n            width & 0xFF,\r\n            0x00, 0x00, // width\r\n            (height >> 8) & 0xFF,\r\n            height & 0xFF,\r\n            0x00, 0x00, // height\r\n        ]));\r\n    }\r\n\r\n    static traf(track, baseMediaDecodeTime) {\r\n        var sampleDependencyTable = MP4.sdtp(track),\r\n            id = track.id;\r\n        return MP4.box(MP4.types.traf,\r\n            MP4.box(MP4.types.tfhd, new Uint8Array([\r\n                0x00, // version 0\r\n                0x00, 0x00, 0x00, // flags\r\n                (id >> 24),\r\n                (id >> 16) & 0XFF,\r\n                (id >> 8) & 0XFF,\r\n                (id & 0xFF), // track_ID\r\n            ])),\r\n            MP4.box(MP4.types.tfdt, new Uint8Array([\r\n                0x00, // version 0\r\n                0x00, 0x00, 0x00, // flags\r\n                (baseMediaDecodeTime >> 24),\r\n                (baseMediaDecodeTime >> 16) & 0XFF,\r\n                (baseMediaDecodeTime >> 8) & 0XFF,\r\n                (baseMediaDecodeTime & 0xFF), // baseMediaDecodeTime\r\n            ])),\r\n            MP4.trun(track,\r\n                sampleDependencyTable.length +\r\n                16 + // tfhd\r\n                16 + // tfdt\r\n                8 +  // traf header\r\n                16 + // mfhd\r\n                8 +  // moof header\r\n                8),  // mdat header\r\n            sampleDependencyTable);\r\n    }\r\n\r\n    /**\r\n     * Generate a track box.\r\n     * @param track {object} a track definition\r\n     * @return {Uint8Array} the track box\r\n     */\r\n    static trak(track) {\r\n        track.duration = track.duration || 0xffffffff;\r\n        return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\r\n    }\r\n\r\n    static trex(track) {\r\n        var id = track.id;\r\n        return MP4.box(MP4.types.trex, new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            (id >> 24),\r\n            (id >> 16) & 0XFF,\r\n            (id >> 8) & 0XFF,\r\n            (id & 0xFF), // track_ID\r\n            0x00, 0x00, 0x00, 0x01, // default_sample_description_index\r\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\r\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\r\n            0x00, 0x01, 0x00, 0x01, // default_sample_flags\r\n        ]));\r\n    }\r\n\r\n    static trun(track, offset) {\r\n        var samples = track.samples || [],\r\n            len = samples.length,\r\n            arraylen = 12 + (16 * len),\r\n            array = new Uint8Array(arraylen),\r\n            i,\r\n            sample,\r\n            duration,\r\n            size,\r\n            flags,\r\n            cts;\r\n        offset += 8 + arraylen;\r\n        array.set([\r\n            0x00, // version 0\r\n            0x00, 0x0f, 0x01, // flags\r\n            (len >>> 24) & 0xFF,\r\n            (len >>> 16) & 0xFF,\r\n            (len >>> 8) & 0xFF,\r\n            len & 0xFF, // sample_count\r\n            (offset >>> 24) & 0xFF,\r\n            (offset >>> 16) & 0xFF,\r\n            (offset >>> 8) & 0xFF,\r\n            offset & 0xFF, // data_offset\r\n        ], 0);\r\n        for (i = 0; i < len; i++) {\r\n            sample = samples[i];\r\n            duration = sample.duration;\r\n            size = sample.size;\r\n            flags = sample.flags;\r\n            cts = sample.cts;\r\n            array.set([\r\n                (duration >>> 24) & 0xFF,\r\n                (duration >>> 16) & 0xFF,\r\n                (duration >>> 8) & 0xFF,\r\n                duration & 0xFF, // sample_duration\r\n                (size >>> 24) & 0xFF,\r\n                (size >>> 16) & 0xFF,\r\n                (size >>> 8) & 0xFF,\r\n                size & 0xFF, // sample_size\r\n                (flags.isLeading << 2) | flags.dependsOn,\r\n                (flags.isDependedOn << 6) |\r\n                (flags.hasRedundancy << 4) |\r\n                (flags.paddingValue << 1) |\r\n                flags.isNonSync,\r\n                flags.degradPrio & 0xF0 << 8,\r\n                flags.degradPrio & 0x0F, // sample_flags\r\n                (cts >>> 24) & 0xFF,\r\n                (cts >>> 16) & 0xFF,\r\n                (cts >>> 8) & 0xFF,\r\n                cts & 0xFF, // sample_composition_time_offset\r\n            ], 12 + 16 * i);\r\n        }\r\n        return MP4.box(MP4.types.trun, array);\r\n    }\r\n\r\n    static initSegment(tracks, duration, timescale) {\r\n        if (!MP4.types) {\r\n            MP4.init();\r\n        }\r\n        var movie = MP4.moov(tracks, duration, timescale),\r\n            result;\r\n        result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\r\n        result.set(MP4.FTYP);\r\n        result.set(movie, MP4.FTYP.byteLength);\r\n        return result;\r\n    }\r\n}\r\n","import * as debug from '../util/debug';\r\n\r\nlet track_id = 1;\r\nexport class BaseRemuxer {\r\n\r\n    static getTrackID() {\r\n        return track_id++;\r\n    }\r\n    \r\n    constructor() {\r\n        this.seq = 1;\r\n    }\r\n\r\n    flush() {\r\n        this.seq++;\r\n        this.mp4track.len = 0;\r\n        this.mp4track.samples = [];\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.readyToDecode || !this.samples.length) return null;\r\n        return true;\r\n    }\r\n}\r\n","import * as debug from '../util/debug';\r\nimport { AACParser } from '../parsers/aac.js';\r\nimport { BaseRemuxer } from './base.js';\r\n\r\nexport class AACRemuxer extends BaseRemuxer {\r\n\r\n    constructor() {\r\n        super();\r\n        this.readyToDecode = false;\r\n        this.nextDts = 0;\r\n        this.dts = 0;\r\n        this.timescale = 1000;\r\n\r\n        this.mp4track = {\r\n            id: BaseRemuxer.getTrackID(),\r\n            type: 'audio',\r\n            channelCount: 0,\r\n            len: 0,\r\n            fragmented: true,\r\n            timescale: this.timescale,\r\n            duration: this.timescale,\r\n            samples: [],\r\n            config: '',\r\n            codec: '',\r\n        };\r\n\r\n        this.samples = [];\r\n        this.aac = new AACParser(this);\r\n    }\r\n\r\n    resetTrack() {\r\n        this.readyToDecode = false;\r\n        this.mp4track.codec = '';\r\n        this.mp4track.channelCount = '';\r\n        this.mp4track.config = '';\r\n        this.mp4track.timescale = this.timescale;\r\n    }\r\n\r\n    remux(samples) {\r\n        let config,\r\n            sample,\r\n            size,\r\n            payload;\r\n        for (let sample of samples) {\r\n            payload = sample.units;\r\n            size = payload.byteLength;\r\n            this.samples.push({\r\n                units: payload,\r\n                size: size,\r\n                duration: sample.duration,\r\n            });\r\n            this.mp4track.len += size;\r\n            if (!this.readyToDecode) {\r\n                this.aac.setAACConfig();\r\n            }\r\n        }\r\n    }\r\n\r\n    getPayload() {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n\r\n        let payload = new Uint8Array(this.mp4track.len);\r\n        let offset = 0;\r\n        let samples = this.mp4track.samples;\r\n        let mp4Sample,\r\n            duration;\r\n\r\n        this.dts = this.nextDts;\r\n\r\n        while (this.samples.length) {\r\n            let sample = this.samples.shift(),\r\n                units = sample.units;\r\n\r\n            duration = sample.duration;\r\n\r\n            if (duration <= 0) {\r\n                debug.log(`remuxer: invalid sample duration at DTS: ${this.nextDts} :${duration}`);\r\n                this.mp4track.len -= sample.size;\r\n                continue;\r\n            }\r\n\r\n            this.nextDts += duration;\r\n            mp4Sample = {\r\n                size: sample.size,\r\n                duration: duration,\r\n                cts: 0,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    isDependedOn: 0,\r\n                    hasRedundancy: 0,\r\n                    degradPrio: 0,\r\n                    dependsOn: 1,\r\n                },\r\n            };\r\n\r\n            payload.set(sample.units, offset);\r\n            offset += sample.size;\r\n            samples.push(mp4Sample);\r\n        }\r\n\r\n        if (!samples.length) return null;\r\n\r\n        return new Uint8Array(payload.buffer, 0, this.mp4track.len);\r\n    }\r\n}\r\n","import * as debug from '../util/debug';\r\nimport { H264Parser } from '../parsers/h264.js';\r\nimport { BaseRemuxer } from './base.js';\r\n\r\nexport class H264Remuxer extends BaseRemuxer {\r\n\r\n    constructor() {\r\n        super();\r\n        this.readyToDecode = false;\r\n        this.nextDts = 0;\r\n        this.dts = 0;\r\n        this.timescale = 1000;\r\n\r\n        this.mp4track = {\r\n            id: BaseRemuxer.getTrackID(),\r\n            type: 'video',\r\n            len: 0,\r\n            fragmented: true,\r\n            sps: '',\r\n            pps: '',\r\n            width: 0,\r\n            height: 0,\r\n            timescale: this.timescale,\r\n            duration: this.timescale,\r\n            samples: [],\r\n        };\r\n\r\n        this.samples = [];\r\n        this.h264 = new H264Parser(this);\r\n    }\r\n\r\n    resetTrack() {\r\n        this.readyToDecode = false;\r\n        this.mp4track.sps = '';\r\n        this.mp4track.pps = '';\r\n    }\r\n\r\n    remux(samples) {\r\n        let sample,\r\n            units,\r\n            unit,\r\n            size,\r\n            keyFrame;\r\n        for (sample of samples) {\r\n            units = [];\r\n            size = 0;\r\n            keyFrame = false;\r\n            for (unit of sample.units) {\r\n                if (this.h264.parseNAL(unit)) {\r\n                    units.push(unit);\r\n                    size += unit.getSize();\r\n                    if (!keyFrame) {\r\n                        keyFrame = unit.isKeyframe();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (units.length > 0 && this.readyToDecode) {\r\n                this.mp4track.len += size;\r\n                this.samples.push({\r\n                    units: units,\r\n                    size: size,\r\n                    keyFrame: keyFrame,\r\n                    duration: sample.duration,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    getPayload() {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n\r\n        let payload = new Uint8Array(this.mp4track.len);\r\n        let offset = 0;\r\n        let samples = this.mp4track.samples;\r\n        let mp4Sample,\r\n            duration;\r\n\r\n        this.dts = this.nextDts;\r\n\r\n        while (this.samples.length) {\r\n            let sample = this.samples.shift(),\r\n                units = sample.units;\r\n\r\n            duration = sample.duration;\r\n\r\n            if (duration <= 0) {\r\n                debug.log(`remuxer: invalid sample duration at DTS: ${this.nextDts} :${duration}`);\r\n                this.mp4track.len -= sample.size;\r\n                continue;\r\n            }\r\n\r\n            this.nextDts += duration;\r\n            mp4Sample = {\r\n                size: sample.size,\r\n                duration: duration,\r\n                cts: 0,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    isDependedOn: 0,\r\n                    hasRedundancy: 0,\r\n                    degradPrio: 0,\r\n                    isNonSync: sample.keyFrame ? 0 : 1,\r\n                    dependsOn: sample.keyFrame ? 2 : 1,\r\n                },\r\n            };\r\n\r\n            for (const unit of units) {\r\n                payload.set(unit.getData(), offset);\r\n                offset += unit.getSize();\r\n            }\r\n\r\n            samples.push(mp4Sample);\r\n        }\r\n\r\n        if (!samples.length) return null;\r\n\r\n        return new Uint8Array(payload.buffer, 0, this.mp4track.len);\r\n    }\r\n}\r\n","export function appendByteArray(buffer1, buffer2) {\r\n    let tmp = new Uint8Array((buffer1.byteLength|0) + (buffer2.byteLength|0));\r\n    tmp.set(buffer1, 0);\r\n    tmp.set(buffer2, buffer1.byteLength|0);\r\n    return tmp;\r\n}\r\n\r\nexport function secToTime(sec) {\r\n    let seconds,\r\n        hours,\r\n        minutes,\r\n        result = '';\r\n\r\n    seconds = Math.floor(sec);\r\n    hours = parseInt(seconds / 3600, 10) % 24;\r\n    minutes = parseInt(seconds / 60, 10) % 60;\r\n    seconds = (seconds < 0) ? 0 : seconds % 60;\r\n\r\n    if (hours > 0) {\r\n        result += (hours < 10 ? '0' + hours : hours) + ':';\r\n    }\r\n    result += (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\r\n    return result;\r\n}\r\n","import * as debug from '../util/debug';\r\nimport { MP4 } from '../util/mp4-generator.js';\r\nimport { AACRemuxer } from '../remuxer/aac.js';\r\nimport { H264Remuxer } from '../remuxer/h264.js';\r\nimport { appendByteArray, secToTime } from '../util/utils.js';\r\nimport Event from '../util/event';\r\n\r\nexport default class RemuxController extends Event {\r\n\r\n    constructor(streaming) {\r\n        super('remuxer');\r\n        this.initialized = false;\r\n        this.trackTypes = [];\r\n        this.tracks = {};\r\n        this.mediaDuration = streaming ? Infinity : 1000;\r\n    }\r\n\r\n    addTrack(type) {\r\n        if (type === 'video' || type === 'both') {\r\n            this.tracks.video = new H264Remuxer();\r\n            this.trackTypes.push('video');\r\n        }\r\n        if (type === 'audio' || type === 'both') {\r\n            this.tracks.audio = new AACRemuxer();\r\n            this.trackTypes.push('audio');\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        for (let type of this.trackTypes) {\r\n            this.tracks[type].resetTrack();\r\n        }\r\n        this.initialized = false;\r\n    }\r\n\r\n    destroy() {\r\n        this.tracks = {};\r\n        this.offAll();\r\n    }\r\n\r\n    flush() {\r\n        if (!this.initialized) {\r\n            if (this.isReady()) {\r\n                this.dispatch('ready');\r\n                for (let type of this.trackTypes) { \r\n                    let track = this.tracks[type];\r\n                    let data = {\r\n                        type: type,\r\n                        payload: MP4.initSegment([track.mp4track], this.mediaDuration, track.mp4track.timescale),\r\n                    };\r\n                    this.dispatch('buffer', data);\r\n                }\r\n                debug.log('Initial segment generated.');\r\n                this.initialized = true;\r\n            }\r\n        } else {\r\n            for (let type of this.trackTypes) {\r\n                let track = this.tracks[type];\r\n                let pay = track.getPayload();\r\n                if (pay && pay.byteLength) {\r\n                    const moof = MP4.moof(track.seq, track.dts, track.mp4track);\r\n                    const mdat = MP4.mdat(pay);\r\n                    let payload = appendByteArray(moof, mdat);\r\n                    let data = {\r\n                        type: type,\r\n                        payload: payload,\r\n                        dts: track.dts\r\n                    };\r\n                    this.dispatch('buffer', data);\r\n                    let duration = secToTime(track.dts / 1000);\r\n                    debug.log(`put segment (${type}): ${track.seq} dts: ${track.dts} samples: ${track.mp4track.samples.length} second: ${duration}`);\r\n                    track.flush();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        for (let type of this.trackTypes) {\r\n            if (!this.tracks[type].readyToDecode || !this.tracks[type].samples.length) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    remux(data) {\r\n        for (let type of this.trackTypes) {\r\n            let samples = data[type];\r\n            if (type === 'audio' && this.tracks.video && !this.tracks.video.readyToDecode) continue; /* if video is present, don't add audio until video get ready */\r\n            if (samples.length > 0) {\r\n                this.tracks[type].remux(samples);\r\n            }\r\n        }\r\n        this.flush();\r\n    }\r\n}\r\n","import * as debug from '../util/debug';\r\nimport Event from '../util/event';\r\nimport { appendByteArray } from '../util/utils.js';\r\n\r\nexport default class BufferController extends Event {\r\n    constructor(sourceBuffer, type) {\r\n        super('buffer');\r\n\r\n        this.type = type;\r\n        this.queue = new Uint8Array();\r\n\r\n        this.cleaning = false;\r\n        this.pendingCleaning = 0;\r\n        this.cleanOffset = 30;\r\n        this.cleanRanges = [];\r\n\r\n        this.sourceBuffer = sourceBuffer;\r\n        this.sourceBuffer.addEventListener('updateend', ()=> {\r\n            if (this.pendingCleaning > 0) {\r\n                this.initCleanup(this.pendingCleaning);\r\n                this.pendingCleaning = 0;\r\n            }\r\n            this.cleaning = false;\r\n            if (this.cleanRanges.length) {\r\n                this.doCleanup();\r\n                return;\r\n            }\r\n        });\r\n\r\n        this.sourceBuffer.addEventListener('error', ()=> {\r\n            this.dispatch('error', { type: this.type, name: 'buffer', error: 'buffer error' });\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.queue = null;\r\n        this.sourceBuffer = null;\r\n        this.offAll();\r\n    }\r\n\r\n    doCleanup() {\r\n        if (!this.cleanRanges.length) {\r\n            this.cleaning = false;\r\n            return;\r\n        }\r\n        let range = this.cleanRanges.shift();\r\n        debug.log(`${this.type} remove range [${range[0]} - ${range[1]})`);\r\n        this.cleaning = true;\r\n        this.sourceBuffer.remove(range[0], range[1]);\r\n    }\r\n\r\n    initCleanup(cleanMaxLimit) {\r\n        if (this.sourceBuffer.updating) {\r\n            this.pendingCleaning = cleanMaxLimit;\r\n            return;\r\n        }\r\n        if (this.sourceBuffer.buffered && this.sourceBuffer.buffered.length && !this.cleaning) {\r\n            for (let i = 0; i < this.sourceBuffer.buffered.length; ++i) {\r\n                let start = this.sourceBuffer.buffered.start(i);\r\n                let end = this.sourceBuffer.buffered.end(i);\r\n\r\n                if ((cleanMaxLimit - start) > this.cleanOffset) {\r\n                    end = cleanMaxLimit - this.cleanOffset;\r\n                    if (start < end) {\r\n                        this.cleanRanges.push([start, end]);\r\n                    }\r\n                }\r\n            }\r\n            this.doCleanup();\r\n        }\r\n    }\r\n\r\n    doAppend() {\r\n        if (!this.queue.length) return;\r\n\r\n        if (this.sourceBuffer.updating) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.sourceBuffer.appendBuffer(this.queue);\r\n            this.queue = new Uint8Array();\r\n        } catch (e) {\r\n            if (e.name === 'QuotaExceededError') {\r\n                debug.log(`${this.type} buffer quota full`);\r\n                this.dispatch('error', { type: this.type, name: 'QuotaExceeded', error: 'buffer error' });\r\n                return;\r\n            }\r\n            debug.error(`Error occured while appending ${this.type} buffer -  ${e.name}: ${e.message}`);\r\n            this.dispatch('error', { type: this.type, name: 'unexpectedError', error: 'buffer error' });\r\n        }\r\n    }\r\n\r\n    feed(data) {\r\n        this.queue = appendByteArray(this.queue, data);\r\n    }\r\n}\r\n","import * as debug from './util/debug';\r\nimport { NALU } from './util/nalu.js';\r\nimport { H264Parser } from './parsers/h264.js';\r\nimport { AACParser } from './parsers/aac.js';\r\nimport Event from './util/event';\r\nimport RemuxController from './controller/remux.js';\r\nimport BufferController from './controller/buffer.js';\r\n\r\nwindow.MediaSource = window.MediaSource || window.WebKitMediaSource;\r\n\r\nexport default class JMuxmer extends Event {\r\n\r\n    static isSupported(codec) {\r\n        return (window.MediaSource && window.MediaSource.isTypeSupported(codec));\r\n    }\r\n\r\n    constructor(options) {\r\n        super('jmuxer');\r\n        window.MediaSource = window.MediaSource || window.WebKitMediaSource;\r\n\r\n        let defaults = {\r\n            node: '',\r\n            mode: 'both', // both, audio, video\r\n            flushingTime: 1500,\r\n            clearBuffer: true,\r\n            onReady: null, // function called when MSE is ready to accept frames\r\n            fps: 30,\r\n            debug: false\r\n        };\r\n        this.options = Object.assign({}, defaults, options);\r\n\r\n        if (this.options.debug) {\r\n            debug.setLogger();\r\n        }\r\n\r\n        if (typeof this.options.node === 'string' && this.options.node == '') {\r\n            debug.error('no video element were found to render, provide a valid video element');\r\n        }\r\n\r\n        if (!this.options.fps) {\r\n            this.options.fps = 30;\r\n        }\r\n        this.frameDuration = (1000 / this.options.fps) | 0;\r\n\r\n        this.node = typeof this.options.node === 'string' ? document.getElementById(this.options.node) : this.options.node;\r\n    \r\n        this.sourceBuffers = {};\r\n        this.isMSESupported = !!window.MediaSource;\r\n       \r\n        if (!this.isMSESupported) {\r\n            throw 'Oops! Browser does not support media source extension.';\r\n        }\r\n\r\n        this.setupMSE();\r\n        this.remuxController = new RemuxController(this.options.clearBuffer); \r\n        this.remuxController.addTrack(this.options.mode);\r\n        \r\n\r\n        this.mseReady = false;\r\n        this.lastCleaningTime = Date.now();\r\n        this.keyframeCache = [];\r\n        this.frameCounter  = 0;\r\n\r\n        /* events callback */\r\n        this.remuxController.on('buffer', this.onBuffer.bind(this));\r\n        this.remuxController.on('ready', this.createBuffer.bind(this));\r\n        this.startInterval();\r\n    }\r\n\r\n    setupMSE() {\r\n        this.mediaSource = new MediaSource();\r\n        this.node.src = URL.createObjectURL(this.mediaSource);\r\n        this.mediaSource.addEventListener('sourceopen', this.onMSEOpen.bind(this));\r\n        this.mediaSource.addEventListener('sourceclose', this.onMSEClose.bind(this));\r\n        this.mediaSource.addEventListener('webkitsourceopen', this.onMSEOpen.bind(this));\r\n        this.mediaSource.addEventListener('webkitsourceclose', this.onMSEClose.bind(this));\r\n    }\r\n\r\n    feed(data) {\r\n        let remux = false,\r\n            nalus,\r\n            aacFrames,\r\n            duration,\r\n            chunks = {\r\n                video: [],\r\n                audio: []\r\n            };\r\n\r\n        if (!data || !this.remuxController) return;\r\n        duration = data.duration ? parseInt(data.duration) : 0;\r\n        if (data.video) {  \r\n            nalus = H264Parser.extractNALu(data.video);\r\n            if (nalus.length > 0) {\r\n                chunks.video = this.getVideoFrames(nalus, duration);\r\n                remux = true;\r\n            }\r\n        }\r\n        if (data.audio) {\r\n            aacFrames = AACParser.extractAAC(data.audio);\r\n            if (aacFrames.length > 0) {\r\n                chunks.audio = this.getAudioFrames(aacFrames, duration);\r\n                remux = true;\r\n            }\r\n        }\r\n        if (!remux) {\r\n            debug.error('Input object must have video and/or audio property. Make sure it is not empty and valid typed array');\r\n            return;\r\n        }\r\n        this.remuxController.remux(chunks);\r\n    }\r\n\r\n    getVideoFrames(nalus, duration) {\r\n        let nalu,\r\n            units = [],\r\n            samples = [],\r\n            naluObj,\r\n            sampleDuration,\r\n            adjustDuration = 0,\r\n            numberOfFrames = [];\r\n\r\n        for (nalu of nalus) {\r\n            naluObj = new NALU(nalu);\r\n            units.push(naluObj);\r\n            if (naluObj.type() === NALU.IDR || naluObj.type() === NALU.NDR) {\r\n                samples.push({units});\r\n                units = [];\r\n                if (this.options.clearBuffer) {\r\n                    if (naluObj.type() === NALU.IDR) {\r\n                        numberOfFrames.push(this.frameCounter);\r\n                    }\r\n                    this.frameCounter++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (duration) {\r\n            sampleDuration = duration / samples.length | 0;\r\n            adjustDuration = (duration - (sampleDuration * samples.length));\r\n        } else {\r\n            sampleDuration = this.frameDuration;\r\n        }\r\n        samples.map((sample) => {\r\n            sample.duration = adjustDuration > 0 ? (sampleDuration + 1) : sampleDuration;\r\n            if (adjustDuration !== 0) {\r\n                adjustDuration--;\r\n            }\r\n        });\r\n\r\n        /* cache keyframe times if clearBuffer set true */\r\n        if (this.options.clearBuffer) {\r\n            numberOfFrames = numberOfFrames.map((total) => {\r\n                return (total * sampleDuration) / 1000;\r\n            });\r\n            this.keyframeCache = this.keyframeCache.concat(numberOfFrames);\r\n        }\r\n        return samples;\r\n    }\r\n\r\n    getAudioFrames(aacFrames, duration) {\r\n        let samples = [],\r\n            units,\r\n            sampleDuration,\r\n            adjustDuration = 0;\r\n\r\n        for (units of aacFrames) {\r\n            samples.push({units});\r\n        }\r\n\r\n        if (duration) {\r\n            sampleDuration = duration / samples.length | 0;\r\n            adjustDuration = (duration - (sampleDuration * samples.length));\r\n        } else {\r\n            sampleDuration = this.frameDuration;\r\n        }\r\n        samples.map((sample) => {\r\n            sample.duration = adjustDuration > 0 ? (sampleDuration + 1) : sampleDuration;\r\n            if (adjustDuration !== 0) {\r\n                adjustDuration--;\r\n            }\r\n        });\r\n        return samples;\r\n    }\r\n\r\n    destroy() {\r\n        this.stopInterval();\r\n        if (this.mediaSource) {\r\n            try {\r\n                if (this.bufferControllers) {\r\n                    this.mediaSource.endOfStream();\r\n                }\r\n            } catch (e) {\r\n                debug.error(`mediasource is not available to end ${e.message}`);\r\n            }\r\n            this.mediaSource = null;\r\n        }\r\n        if (this.remuxController) {\r\n            this.remuxController.destroy();\r\n            this.remuxController = null;\r\n        }\r\n        if (this.bufferControllers) {\r\n            for (let type in this.bufferControllers) {\r\n                this.bufferControllers[type].destroy();\r\n            }\r\n            this.bufferControllers = null;\r\n        }\r\n        this.node = false;\r\n        this.mseReady = false;\r\n        this.videoStarted = false;\r\n    }\r\n\r\n    createBuffer() {\r\n        if (!this.mseReady || !this.remuxController || !this.remuxController.isReady() || this.bufferControllers) return;\r\n        this.bufferControllers = {};\r\n        for (let type in this.remuxController.tracks) {\r\n            let track = this.remuxController.tracks[type];\r\n            if (!JMuxmer.isSupported(`${type}/mp4; codecs=\"${track.mp4track.codec}\"`)) {\r\n                debug.error('Browser does not support codec');\r\n                return false;\r\n            }\r\n            let sb = this.mediaSource.addSourceBuffer(`${type}/mp4; codecs=\"${track.mp4track.codec}\"`);\r\n            this.bufferControllers[type] = new BufferController(sb, type);\r\n            this.sourceBuffers[type] = sb;\r\n            this.bufferControllers[type].on('error', this.onBufferError.bind(this));\r\n        }\r\n    }\r\n\r\n    startInterval() {\r\n\r\n        this.interval = setInterval(()=>{\r\n            if (this.bufferControllers) {\r\n                this.releaseBuffer();\r\n                this.clearBuffer();\r\n            }\r\n        }, this.options.flushingTime);\r\n    }\r\n\r\n    stopInterval() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n        }\r\n    }\r\n\r\n    releaseBuffer() {\r\n        for (let type in this.bufferControllers) {\r\n            this.bufferControllers[type].doAppend();\r\n        }\r\n    }\r\n\r\n    getSafeBufferClearLimit(offset) {\r\n        let maxLimit = (this.options.mode === 'audio' && offset) || 0,\r\n            adjacentOffset;\r\n\r\n        for (let i = 0; i < this.keyframeCache.length; i++) {\r\n            if (this.keyframeCache[i] >= offset) {\r\n                break;\r\n            }\r\n            adjacentOffset = this.keyframeCache[i];\r\n        }\r\n\r\n        if (adjacentOffset) {\r\n            this.keyframeCache = this.keyframeCache.filter( keyframePoint => {\r\n                if (keyframePoint < adjacentOffset) {\r\n                    maxLimit = keyframePoint;\r\n                }\r\n                return keyframePoint >= adjacentOffset;\r\n            });\r\n        }\r\n        \r\n        return maxLimit;\r\n    }\r\n\r\n    clearBuffer() {\r\n        if (this.options.clearBuffer && (Date.now() - this.lastCleaningTime) > 10000) {\r\n            for (let type in this.bufferControllers) {\r\n                let cleanMaxLimit = this.getSafeBufferClearLimit(this.node.currentTime);\r\n                this.bufferControllers[type].initCleanup(cleanMaxLimit);\r\n            }\r\n            this.lastCleaningTime = Date.now();\r\n        }\r\n    }\r\n\r\n    onBuffer(data) {\r\n        if (this.bufferControllers && this.bufferControllers[data.type]) {\r\n            this.bufferControllers[data.type].feed(data.payload);\r\n        }\r\n    }\r\n\r\n    /* Events on MSE */\r\n    onMSEOpen() {\r\n        this.mseReady = true;\r\n        if (typeof this.options.onReady === 'function') {\r\n            this.options.onReady();\r\n            this.options.onReady = null;\r\n        }\r\n        this.createBuffer();\r\n    }\r\n\r\n    onMSEClose() {\r\n        this.mseReady = false;\r\n        this.videoStarted = false;\r\n    }\r\n\r\n    onBufferError(data) {\r\n        if (data.name == 'QuotaExceeded') {\r\n            this.bufferControllers[data.type].initCleanup(this.node.currentTime);\r\n            return;\r\n        }\r\n\r\n        if (this.mediaSource.sourceBuffers.length > 0 && this.sourceBuffers[data.type]) {\r\n            this.mediaSource.removeSourceBuffer(this.sourceBuffers[data.type]);\r\n        }\r\n        if (this.mediaSource.sourceBuffers.length == 0) {\r\n            try {\r\n                this.mediaSource.endOfStream();\r\n            } catch (e) {\r\n                debug.error('mediasource is not available to end');\r\n            }\r\n        }\r\n    }\r\n}"],"names":["logger","errorLogger","setLogger","console","log","error","message","optionalParams","NALU","nalu","ntype","TYPES","IDR","SEI","SPS","PPS","NDR","AUD","data","payload","nri","type","getNri","byteLength","result","Uint8Array","getSize","view","DataView","buffer","setUint32","set","ExpGolomb","index","bitLength","size","bitsAvailable","moveIndex","getBits","offsetBits","offset","byte","bits","nextSize","leadingZeroCount","skipBits","skipLZ","prefix","readBits","value","readUEG","numberOfBytes","H264Parser","i","length","state","lastIndex","push","subarray","decoder","count","lastScale","nextScale","deltaScale","j","readEG","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","profileIdc","profileCompat","levelIdc","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","readUByte","skipUEG","chromaFormatIdc","readBoolean","skipScalingList","picOrderCntType","skipEG","sarRatio","aspectRatioIdc","unitsInTick","readUInt","timeScale","fixedFrameRate","Math","ceil","remuxer","track","mp4track","sps","config","readSPS","width","height","codec","codecarray","byteOffset","h","getUint8","toString","pps","unit","parsePPS","getData","readyToDecode","parseSPS","isHDAvail","aacHeader","AACParser","headerLength","frameLength","isAACPattern","getHeaderLength","getFrameLength","slice","objectType","sampleIndex","channelCount","headerData","getAACHeaderData","Event","listener","event","fn","indexOf","splice","map","each","apply","MP4","types","hasOwnProperty","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","dref","stco","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","ftyp","DINF","dinf","len","hdlr","mdat","timescale","duration","mdhd","mdia","minf","sequenceNumber","mfhd","smhd","stbl","vmhd","sn","baseMediaDecodeTime","moof","traf","tracks","boxes","trak","moov","mvhd","concat","mvex","trex","bytes","samples","flags","dependsOn","isDependedOn","hasRedundancy","sdtp","stsd","stts","stsc","stsz","Array","prototype","call","avcc","avcC","avc1","btrt","configlen","audiosamplerate","mp4a","esds","id","volume","tkhd","sampleDependencyTable","tfhd","tfdt","trun","arraylen","array","sample","cts","isLeading","paddingValue","isNonSync","degradPrio","init","movie","track_id","BaseRemuxer","seq","AACRemuxer","nextDts","dts","getTrackID","aac","units","setAACConfig","isReady","mp4Sample","shift","H264Remuxer","h264","keyFrame","parseNAL","isKeyframe","appendByteArray","buffer1","buffer2","tmp","secToTime","sec","seconds","hours","minutes","floor","parseInt","RemuxController","streaming","initialized","trackTypes","mediaDuration","Infinity","video","audio","resetTrack","offAll","dispatch","initSegment","pay","getPayload","flush","remux","BufferController","sourceBuffer","queue","cleaning","pendingCleaning","cleanOffset","cleanRanges","addEventListener","initCleanup","doCleanup","name","range","remove","cleanMaxLimit","updating","buffered","start","end","appendBuffer","e","window","MediaSource","WebKitMediaSource","JMuxmer","isTypeSupported","options","defaults","Object","assign","debug","node","fps","frameDuration","document","getElementById","sourceBuffers","isMSESupported","setupMSE","remuxController","clearBuffer","addTrack","mode","mseReady","lastCleaningTime","Date","now","keyframeCache","frameCounter","on","onBuffer","bind","createBuffer","startInterval","mediaSource","src","URL","createObjectURL","onMSEOpen","onMSEClose","nalus","aacFrames","chunks","extractNALu","getVideoFrames","extractAAC","getAudioFrames","naluObj","sampleDuration","adjustDuration","numberOfFrames","total","stopInterval","bufferControllers","endOfStream","destroy","videoStarted","isSupported","sb","addSourceBuffer","onBufferError","interval","setInterval","releaseBuffer","flushingTime","doAppend","maxLimit","adjacentOffset","filter","keyframePoint","getSafeBufferClearLimit","currentTime","feed","onReady","removeSourceBuffer"],"mappings":"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"}